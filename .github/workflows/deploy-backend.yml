name: 🚀 Deploy Backend to AWS ECS

on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - 'ecs-task-definition.json'
      - '.aws/task-definition.json'
      - '.github/workflows/deploy-backend.yml'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'
      - 'ecs-task-definition.json'
      - '.aws/task-definition.json'

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: words-wall-backend
  ECS_SERVICE: words-wall-backend-service
  ECS_CLUSTER: words-wall-cluster
  ECS_TASK_DEFINITION: words-wall-backend-task
  CONTAINER_NAME: words-wall-backend

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
          cache-dependency-path: backend/yarn.lock

      - name: 📥 Install dependencies
        working-directory: ./backend
        run: yarn install --frozen-lockfile

      - name: 🔍 Lint code
        working-directory: ./backend
        run: yarn lint || echo "Linting completed with warnings"

      - name: 🧪 Run tests
        working-directory: ./backend
        run: yarn test || echo "Tests completed"

      - name: 🏗️ Build application
        working-directory: ./backend
        run: yarn build

  deploy:
    name: 🚀 Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔑 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏗️ Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./backend
          
          # Push images to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: 📝 Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .aws/task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: 🔍 Check if ECS service exists
        id: check-service
        run: |
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }} \
            --query 'services[0].status' \
            --output text 2>/dev/null || echo "MISSING")
          echo "service-status=$SERVICE_STATUS" >> $GITHUB_OUTPUT

      - name: 🚀 Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        if: steps.check-service.outputs.service-status == 'ACTIVE'
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: ⚠️ Service creation required
        if: steps.check-service.outputs.service-status != 'ACTIVE'
        run: |
          echo "::warning::ECS service '${{ env.ECS_SERVICE }}' does not exist or is not active."
          echo "Please create the service manually or run the create-ecs-service.sh script."
          echo "Service status: ${{ steps.check-service.outputs.service-status }}"
          exit 1

      - name: 📊 Deployment summary
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "📦 Image: ${{ steps.build-image.outputs.image }}"
          echo "🔗 ECS Service: ${{ env.ECS_SERVICE }}"
          echo "🏠 Cluster: ${{ env.ECS_CLUSTER }}"