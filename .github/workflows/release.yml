#name: 🎉 Release Management
#
#on:
#  push:
#    tags:
#      - 'v*'
#  workflow_dispatch:
#    inputs:
#      version:
#        description: 'Release version (e.g., v1.0.0)'
#        required: true
#        type: string
#
#jobs:
#  create-release:
#    name: 📦 Create Release
#    runs-on: ubuntu-latest
#    outputs:
#      upload_url: ${{ steps.create_release.outputs.upload_url }}
#      tag_name: ${{ steps.get_version.outputs.tag_name }}
#
#    steps:
#      - name: 📥 Checkout code
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: 🏷️ Get version
#        id: get_version
#        run: |
#          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
#            echo "tag_name=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
#          else
#            echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
#          fi
#
#      - name: 📋 Generate changelog
#        id: changelog
#        run: |
#          echo "## 🚀 What's New in ${{ steps.get_version.outputs.tag_name }}" > changelog.md
#          echo "" >> changelog.md
#
#          # Get commits since last tag
#          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
#          if [ -n "$LAST_TAG" ]; then
#            echo "### 📝 Changes since $LAST_TAG:" >> changelog.md
#            git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> changelog.md
#          else
#            echo "### 📝 Initial Release Features:" >> changelog.md
#            echo "- 🚀 AI-Powered Vocabulary Learning Platform" >> changelog.md
#            echo "- 📱 Mobile-responsive design with glassmorphism UI" >> changelog.md
#            echo "- 🤖 Local Qwen3:1.7b integration" >> changelog.md
#            echo "- 🔐 JWT authentication system" >> changelog.md
#            echo "- 📚 Six-section vocabulary analysis" >> changelog.md
#            echo "- 🏷️ Auto-organized word collections" >> changelog.md
#            echo "- ☁️ AWS ECS deployment ready" >> changelog.md
#          fi
#
#          echo "" >> changelog.md
#          echo "### 🛠️ Technical Highlights:" >> changelog.md
#          echo "- **Frontend**: Next.js 14 with TypeScript" >> changelog.md
#          echo "- **Backend**: NestJS with SQLite" >> changelog.md
#          echo "- **AI**: Local Qwen3:1.7b via Ollama" >> changelog.md
#          echo "- **Deployment**: GitHub Actions + AWS ECS" >> changelog.md
#          echo "- **Design**: Mobile-first responsive layout" >> changelog.md
#
#      - name: 📦 Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ steps.get_version.outputs.tag_name }}
#          release_name: Words Wall ${{ steps.get_version.outputs.tag_name }}
#          body_path: changelog.md
#          draft: false
#          prerelease: ${{ contains(steps.get_version.outputs.tag_name, 'alpha') || contains(steps.get_version.outputs.tag_name, 'beta') || contains(steps.get_version.outputs.tag_name, 'rc') }}
#
#  build-artifacts:
#    name: 🏗️ Build Release Artifacts
#    runs-on: ubuntu-latest
#    needs: create-release
#    strategy:
#      matrix:
#        component: [backend, frontend]
#
#    steps:
#      - name: 📥 Checkout code
#        uses: actions/checkout@v4
#
#      - name: 📦 Setup Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: '20'
#          cache: 'yarn'
#          cache-dependency-path: ${{ matrix.component }}/yarn.lock
#
#      - name: 📥 Install dependencies
#        working-directory: ./${{ matrix.component }}
#        run: yarn install --frozen-lockfile
#
#      - name: 🏗️ Build application
#        working-directory: ./${{ matrix.component }}
#        run: yarn build
#
#      - name: 📦 Create artifact
#        run: |
#          cd ${{ matrix.component }}
#          tar -czf ../${{ matrix.component }}-${{ needs.create-release.outputs.tag_name }}.tar.gz dist/ node_modules/ package.json
#
#      - name: 📤 Upload artifact to release
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ needs.create-release.outputs.upload_url }}
#          asset_path: ./${{ matrix.component }}-${{ needs.create-release.outputs.tag_name }}.tar.gz
#          asset_name: ${{ matrix.component }}-${{ needs.create-release.outputs.tag_name }}.tar.gz
#          asset_content_type: application/gzip
#
#  docker-release:
#    name: 🐳 Docker Release
#    runs-on: ubuntu-latest
#    needs: create-release
#
#    steps:
#      - name: 📥 Checkout code
#        uses: actions/checkout@v4
#
#      - name: 🔐 Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#
#      - name: 🔑 Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#
#      - name: 🏗️ Build and push Docker image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: words-wall-backend
#          IMAGE_TAG: ${{ needs.create-release.outputs.tag_name }}
#        run: |
#          # Build and tag image
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./backend
#
#          # Push images
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
#
#  deploy-release:
#    name: 🚀 Deploy Release
#    runs-on: ubuntu-latest
#    needs: [create-release, docker-release]
#    if: ${{ !contains(needs.create-release.outputs.tag_name, 'alpha') && !contains(needs.create-release.outputs.tag_name, 'beta') }}
#
#    steps:
#      - name: 📥 Checkout code
#        uses: actions/checkout@v4
#
#      - name: 🔐 Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-east-1
#
#      - name: 🔑 Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#
#      - name: 📝 Update ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: .aws/task-definition.json
#          container-name: words-wall-backend
#          image: ${{ steps.login-ecr.outputs.registry }}/words-wall-backend:${{ needs.create-release.outputs.tag_name }}
#
#      - name: 🚀 Deploy to ECS
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: words-wall-backend-service
#          cluster: words-wall-cluster
#          wait-for-service-stability: true
#
#      - name: 📊 Deployment notification
#        run: |
#          echo "## 🎉 Release ${{ needs.create-release.outputs.tag_name }} Deployed!" >> $GITHUB_STEP_SUMMARY
#          echo "- **Backend**: Deployed to AWS ECS" >> $GITHUB_STEP_SUMMARY
#          echo "- **Docker Image**: words-wall-backend:${{ needs.create-release.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
#          echo "- **Status**: Production deployment complete" >> $GITHUB_STEP_SUMMARY